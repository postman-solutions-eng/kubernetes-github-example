name: main-deployment
on:
  push:
    branches: [main]
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
  deployments: write
  statuses: write
jobs:
  test:
    name: run tests
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_INLINE_CACHE: 1
    steps:
      - uses: actions/checkout@v2
      - name: run functional tests
        run: npm run container-test-functional
      - name: run e2e tests
        run: npm run container-test-e2e
  setup-deployment:
    runs-on: ubuntu-latest
    needs: [test]
    outputs:
      deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
    steps:
      - name: create deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          environment: production
          transient_environment: true
          auto_merge: false
          required_contexts: '[]'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: set deployment status to in progress
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  push:
    name: build and push to ECR
    needs: [setup-deployment]
    outputs:
      deployment: ${{ needs.setup-deployment.outputs.deployment }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/actions/ecr-push
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-role-duration-seconds: ${{ secrets.AWS_SESSION_DURATION }}
          ecr-repo-name: ${{ secrets.ECR_REPO }}
          build-target: app
          image-tag: ${{ github.sha }}
  kubernetes:
    name: deploy to Kubernetes
    needs: [push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: deploy-to-kubernetes
        uses: ./.github/workflows/actions/kubernetes
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-role-duration-seconds: ${{ secrets.AWS_SESSION_DURATION }}
          aws-eks-cluster: ${{ secrets.AWS_EKS_CLUSTER }}
          app-name: ${{ secrets.APP }}
          ecr-repo-name: ${{ secrets.ECR_REPO }}
          image-tag: ${{ github.sha }}
      - name: set deployment status to success
        id: successful_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ needs.push.outputs.deployment }}
          environment_url: ${{ format('http://{0}', steps.deploy-to-kubernetes.outputs.url) }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: success
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: set deployment status to failure
        id: failed_deployment
        uses: octokit/request-action@v2.x
        if: failure()
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ needs.kubernetes.outputs.deployment }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: failure
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
