name: deploy
on: [push, workflow_dispatch]
env:
  IMAGE: se-github-example-quotable
  AWS_REGION: us-east-2
  AWS_ASSUME_ROLE_ARN: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
  AWS_SESSION_DURATION: ${{ secrets.AWS_SESSION_DURATION }}
  AWS_EKS_CLUSTER: ${{ secrets.AWS_EKS_CLUSTER }}
  DOCKER_BUILDKIT: 1
  BUILDKIT_INLINE_CACHE: 1
permissions:
  id-token: write
  contents: read
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: run functional tests
        run: docker build --target=test-functional .
      - name: run e2e tests
        run: docker build --target=test-e2e .
  push:
    needs: [test]
    runs-on: ubuntu-latest
    outputs:
      full-image: ${{ steps.push-image.outputs.full-image }}
    steps:
      - uses: actions/checkout@v2
      - name: configure AWS credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: ${{ env.AWS_SESSION_DURATION }}
      - name: login to AWS ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      - name: build image and push to ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPO: ${{ env.IMAGE }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export FULL_IMAGE="$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG"
          docker build --target=app --tag="$FULL_IMAGE" . && \
          docker push "$FULL_IMAGE" && \
          echo "::set-output name=full-image::$FULL_IMAGE"
  kubernetes:
    needs: [push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: configure AWS credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: ${{ env.AWS_SESSION_DURATION }}
      - name: login to AWS ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      - name: build resources, deploy to kubernetes
        env:
          FULL_IMAGE: ${{ needs.push.outputs.full-image }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "[Workflow] Installing envsub CLI."
          npm install -g envsub
          echo "[Workflow] Generating image patch."
          envsub ./kubernetes/image_patch.json ./kubernetes/image_patch.json
          echo "[Workflow] Generating Kubernetes resources with kustomize."
          kubectl kustomize ./kubernetes -o kube.yaml
          echo "Getting kubeconfig data."
          aws eks update-kubeconfig --name $AWS_EKS_CLUSTER
          echo "Deploy Kubernetes resources"
          kubectl apply -f ./kube.yaml
          kubectl rollout status deployment/$IMAGE
          kubectl get svc $IMAGE -o jsonpath='Deployed to URL: {.status.loadBalancer.ingress[0].hostname}'
