name: manage resources in kubernetes
inputs:
  aws-region:
    type: string
    required: true
  aws-role-to-assume:
    type: string
    required: true
  aws-role-duration-seconds:
    type: string
    required: true
  aws-eks-cluster:
    type: string
    required: true
  app-name:
    type: string
    required: true
  ecr-repo-name:
    type: string
    required: true
  image-tag:
    type: string
    required: true
  name-suffix:
    type: string
    required: false
  delete:
    type: boolean
    required: false
    default: false
outputs:
  url:
    value: ${{ steps.deploy-to-kubernetes.outputs.url }}
runs:
  using: composite
  steps:
    - name: configure AWS credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
    - name: login to AWS ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
    - name: build resources
      env:
        APP: ${{ inputs.app-name }}
        NAME_SUFFIX: ${{ inputs.name-suffix }}
        IMAGE_REF: |
          ${{
              format(
                '{0}/{1}:{2}',
                inputs.ecr-repo-name,
                steps.ecr-login.outputs.registry,
                inputs.image-tag
              )
          }}
      shell: bash
      run: |
        kustomize edit set label app="$APP"
        kustomize edit set image app-image="$IMAGE_REF"
        [[ ! -z $NAME_SUFFIX ]] && kustomzie edit set namesuffix -- "$NAME_SUFFIX"
        echo "MANIFESTS=$(kustomize ./manifests)" >> $GITHUB_ENV
    - name: get kubeconfig from eks
      env:
        AWS_EKS_CLUSTER: ${{ inputs.aws-eks-cluster }}
      shell: bash
      run: |
        aws eks update-kubeconfig --name $AWS_EKS_CLUSTER
    - name: deploy to kubernetes
      id: deploy-to-kubernetes
      if: ${{ inputs.delete == 'false' }}
      env:
        APP: ${{ inputs.app-name }}
      shell: bash
      run: |
        echo "$MANIFESTS" | kubectl apply -f
        kubectl rollout status "deployment/$APP"
        export SVC_URL="$(kubectl get svc $APP -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
        echo "::set-output name=url::$SVC_URL"
    - name: remove from kubernetes
      if: ${{ inputs.delete == 'true' }}
      env:
        APP: ${{ inputs.app-name }}
      shell: bash
      run: |
        echo "$MANIFESTS" | kubectl delete -f
