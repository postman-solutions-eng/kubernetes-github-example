name: push image to ECR
description: Builds and pushes an image to ECR.
inputs:
  aws-region:
    type: string
    required: true
  aws-role-to-assume:
    type: string
    required: true
  aws-role-duration-seconds:
    type: string
    required: true
  ecr-repo-name:
    type: string
    required: true
  image-tag:
    type: string
    required: true
  sha:
    type: string
    required: true
  build-target:
    type: string
    required: false
    default: app
outputs:
  image-digest:
    value: ${{ steps.push-image.image-digest }}
runs:
  using: composite
  steps:
    - name: configure AWS credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
    - name: login to AWS ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
    - name: build image and push to ECR
      id: push-image
      env:
        ECR_REPO: ${{ inputs.ecr-repo-name }}
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        BUILD_TARGET: ${{ inputs.build-target }}
        SHA: ${{ inputs.sha }}
        DOCKER_BUILDKIT: 1
        BUILDKIT_INLINE_CACHE: 1
      shell: bash
      run: |
        aws ecr create-repository --repository-name=$ECR_REPO 2>&1 | grep -v RepositoryAlreadyExistsException || true
        FULL_IMAGE="$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG"
        FULL_IMAGE_SHA="$ECR_REGISTRY/$ECR_REPO:$SHA"
        docker build --target="$BUILD_TARGET" --tag="$FULL_IMAGE" --tag="$FULL_IMAGE_SHA" . && \
        IMAGE_DIGEST=$(docker image inspect "$FULL_IMAGE" -f '{{.Id}}')
        docker push --all-tags "$ECR_REGISTRY/$ECR_REPO"
        echo "::set-output name=image-digest::$IMAGE_DIGEST"
