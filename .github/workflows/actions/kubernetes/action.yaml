name: deploy to kubernetes
description: Deploys images to Kubernetes.

inputs:
  aws-region:
    type: string
    required: true
  aws-role-to-assume:
    type: string
    required: true
  aws-role-duration-seconds:
    type: string
    required: true
  app-name:
    type: string
    required: true
  ecr-repo-name:
    type: string
    required: true
runs:
  - using: composite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: configure AWS credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.aws-role-to-assume }}
          role-duration-seconds: ${{ inputs.aws-aws-role-duration-seconds }}
      - name: login to AWS ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      - name: build resources, deploy to kubernetes
        env:
          APP: ${{ inputs.app-name }}
          ECR_REPO: ${{ inputs.ecr-repo-name }}
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export FULL_IMAGE="$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG"
          echo "[Workflow] Installing envsub CLI."
          npm install -g envsub
          echo "[Workflow] Patching resources."
          envsub ./kubernetes/deployment_patch.json
          cat ./kubernetes/deployment_patch.json
          envsub ./kubernetes/service_patch.json
          cat ./kubernetes/service_patch.json
          echo "[Workflow] Generating Kubernetes resources with kustomize."
          kubectl kustomize ./kubernetes -o kube.yaml
          echo "[Workflow] Getting kubeconfig data for $AWS_EKS_CLUSTER."
          aws eks update-kubeconfig --name $AWS_EKS_CLUSTER
          echo "[Workflow] Deploy Kubernetes resources"
          kubectl apply -f ./kube.yaml
          kubectl rollout status deployment/$APP
          kubectl get svc $APP -o jsonpath='Deployed to URL: {.status.loadBalancer.ingress[0].hostname}'
