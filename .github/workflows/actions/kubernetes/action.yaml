name: manage resources in kubernetes
inputs:
  aws-region:
    type: string
    required: true
  aws-role-to-assume:
    type: string
    required: true
  aws-role-duration-seconds:
    type: string
    required: true
  aws-eks-cluster:
    type: string
    required: true
  app-name:
    type: string
    required: true
  ecr-repo-name:
    type: string
    required: true
  image-tag:
    type: string
    required: true
  delete:
    type: boolean
    required: false
    default: false
outputs:
  url:
    value: ${{ steps.deploy-to-kubernetes.outputs.url }}
runs:
  using: composite
  steps:
    - name: configure AWS credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
    - name: login to AWS ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
    - name: build resources
      env:
        APP: ${{ inputs.app-name }}
        ECR_REPO: ${{ inputs.ecr-repo-name }}
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        IMAGE_TAG: ${{ inputs.image-tag }}
      shell: bash
      run: |
        export FULL_IMAGE="$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG"
        echo "[Workflow] Installing envsub CLI."
        npm install -g envsub
        echo "[Workflow] Patching resources."
        envsub ./kubernetes/deployment_patch.json
        cat ./kubernetes/deployment_patch.json
        envsub ./kubernetes/service_patch.json
        cat ./kubernetes/service_patch.json
        echo "[Workflow] Generating Kubernetes resources with kustomize."
        kubectl kustomize ./kubernetes -o kube.yaml
    - name: get kubeconfig from eks
      env:
        AWS_EKS_CLUSTER: ${{ inputs.aws-eks-cluster }}
      shell: bash
      run: |
        aws eks update-kubeconfig --name $AWS_EKS_CLUSTER
    - name: deploy to kubernetes
      id: deploy-to-kubernetes
      if: ${{ inputs.delete == 'false' }}
      env:
        APP: ${{ inputs.app-name }}
      shell: bash
      run: |
        kubectl apply -f ./kube.yaml
        kubectl rollout status deployment/$APP
        export SVC_URL="$(kubectl get svc $APP -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
        echo "::set-output name=url::$(echo $SVC_URL | base64)"
    - name: remove from kubernetes
      if: ${{ inputs.delete == 'true' }}
      env:
        APP: ${{ inputs.app-name }}
      shell: bash
      run: |
        kubectl delete -f ./kube.yaml
