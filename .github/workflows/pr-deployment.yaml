name: pr-deployment
on:
  issue_comment:
    types: [created]
  pull_request:
    types: [closed]
permissions:
  id-token: write
  contents: read
  deployments: write
  statuses: write
  pull-requests: write
jobs:
  get-ref:
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.get-ref-from-pr.outputs.ref || steps.get-ref-from-issue.outputs.ref }}
    steps:
      - name: get ref from pr
        id: get-ref-from-pr
        if: github.event_name == 'pull_request'
        env:
          REF: ${{ github.head_ref }}
        shell: bash
        run: echo "::set-output name=ref::$REF"
      - name: get issue from comment
        id: get-issue
        if: github.event_name == 'issue_comment'
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/:repository/pulls/:issue_id
          repository: ${{ github.repository }}
          issue_id: ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: get ref from pr issue
        id: get-ref-from-issue
        if: github.event_name == 'issue_comment'
        shell: bash
        env:
          DATA: ${{ steps.get-issue.outputs.data }}
        run: |
          export REF=$(echo $DATA | jq '.head.ref')
          echo "::set-output name=ref::$REF"

  evict-inactive:
    needs: [get-ref]
    name: evict previous deployment
    runs-on: ubuntu-latest
    steps:
      - name: check for previous deployment
        id: check-previous
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/:repository/deployments
          repository: ${{ github.repository }}
          ref: ${{ needs.get-ref.outputs.ref }}
          environment: development
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: set previous deployment as inactive
        if: ${{ toJson(fromJson(steps.check-previous.outputs.data)) != '[]' }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.check-previous.outputs.data)[0].id }}
          environment: development
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: inactive
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: checkout to access composite action
        uses: actions/checkout@v2
        if: ${{ toJson(fromJson(steps.check-previous.outputs.data)) != '[]' && github.event_name == 'pull_request' }}
      - name: delete from Kubernetes
        if: ${{ toJson(fromJson(steps.check-previous.outputs.data)) != '[]' && github.event_name == 'pull_request' }}
        uses: ./.github/workflows/actions/kubernetes
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-role-duration-seconds: ${{ secrets.AWS_SESSION_DURATION }}
          aws-eks-cluster: ${{ secrets.AWS_EKS_CLUSTER }}
          app-name: ${{ secrets.APP }}
          ecr-repo-name: ${{ secrets.ECR_REPO }}
          image-tag: ${{ github.sha }}
          delete: true
  deploy-check:
    needs: [evict-inactive]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issue_comment' && toJson(github.event.issue.pull_request) }}
    steps:
      - name: check if commenter has permission to deploy
        id: check_permissions
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/:repository/collaborators/:sender/permission
          repository: ${{ github.repository }}
          sender: ${{ github.event.sender.login }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: acknowledge deployment request to commenter
        id: check
        if: |
          fromJson(steps.check_permissions.outputs.data).permission ==  'admin' || fromJson(steps.check_permissions.outputs.data).permission == 'write'
        uses: khan/pull-request-comment-trigger@master
        with:
          trigger: '/deploy'
          reaction: rocket
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
  setup-deployment:
    name: prepare deployment
    runs-on: ubuntu-latest
    needs: [deploy-check]
    outputs:
      deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
    if: needs.deploy-check.outputs.triggered == 'true'
    steps:
      - name: get pull request ref
        id: get_pull_request_ref
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/:repository/pulls/:issue_id
          repository: ${{ github.repository }}
          issue_id: ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: create deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        env:
          REF: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}
          REQUEST_BODY: |
            {
              "ref": "$REF",
              "transient_environment": true,
              "auto_merge": false
              "environment": "development"
              "required_contexts": ["pr-test"]
            }
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          route: POST /repos/:repository/deployments
          repository: ${{ github.repository }}
          body: ${{ toJson(env.REQUEST_BODY) }}
      - name: set deployment status to in progress
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  push:
    name: build and push image to ECR
    needs: [setup-deployment]
    runs-on: ubuntu-latest
    outputs:
      deployment: ${{ needs.setup-deployment.outputs.deployment }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/actions/ecr-push
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-role-duration-seconds: ${{ secrets.AWS_SESSION_DURATION }}
          ecr-repo-name: ${{ secrets.ECR_REPO }}
          build-target: app
          image-tag: ${{ format('dev-pr-{0}', github.event.issue.number) }}
  kubernetes:
    name: deploy to Kubernetes
    needs: [push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/actions/kubernetes
        id: deploy-to-kubernetes
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-role-duration-seconds: ${{ secrets.AWS_SESSION_DURATION }}
          aws-eks-cluster: ${{ secrets.AWS_EKS_CLUSTER }}
          ecr-repo-name: ${{ secrets.ECR_REPO }}
          app-name: ${{ format('{0}-dev-pr-{1}', secrets.APP, github.event.issue.number) }}
          image-tag: ${{ format('dev-pr-{0}', github.event.issue.number) }}
      - name: set deployment status to success
        id: successful_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ needs.push.outputs.deployment }}
          environment_url: ${{ format('http://{0}', steps.deploy-to-kubernetes.outputs.url) }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: success
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: set deployment status to failure
        id: failed_deployment
        uses: octokit/request-action@v2.x
        if: failure()
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ needs.push.outputs.deployment }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: failure
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
